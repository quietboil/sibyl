/*
    CREATE TABLE lob_data (
        id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(50),
        text CLOB DEFAULT EMPTY_CLOB()
    );

    DECLARE
        v_str VARCHAR2(32767);
        v_len INTEGER;
    BEGIN
        FOR i IN 1..10000 LOOP
            v_len := Round(DBMS_RANDOM.VALUE(2000, 32000));
            v_str := DBMS_RANDOM.String('P', v_len);
            v_len := v_len - Length(v_str);
            WHILE v_len > 0 LOOP
                v_str := v_str || DBMS_RANDOM.String('P', v_len);
                v_len := v_len - Length(v_str);
            END LOOP;

            INSERT INTO lob_data (name, text)
            VALUES ( DBMS_RANDOM.String('A', Trunc(DBMS_RANDOM.VALUE(20, 50))), v_str );
        END LOOP;
    END;
    /
*/
fn main() -> sibyl::Result<()> {
    use sibyl::CLOB;

    let dbname = std::env::var("DBNAME").expect("database name");
    let dbuser = std::env::var("DBUSER").expect("user name");
    let dbpass = std::env::var("DBPASS").expect("password");

    let oracle = sibyl::env()?;
    let session = oracle.connect(&dbname, &dbuser, &dbpass)?;
    session.set_lob_prefetch_size(32768)?;

    let stmt = session.prepare("
        SELECT id, name, text 
          FROM lob_data
         WHERE Dbms_Lob.GetLength(text) BETWEEN :MIN_LEN AND :MAX_LEN
      ORDER BY Dbms_Lob.GetLength(text)
    ")?;
    stmt.set_prefetch_rows(100)?;

    let rows = stmt.query((2000, 10000, ()))?;

    while let Some(row) = rows.next()? {
        let id: i32 = row.get(0)?;
        let name: &str = row.get(1)?;
        let text: CLOB = row.get(2)?;

        let text_len = text.len()?;

        let mut content = String::new();
        let content_len = text.read(0, text_len, &mut content)?;

        println!(
            "{id}: [{text_len} / {content_len} / {}] = {name}",
            content.len()
        );
    }
    Ok(())
}
