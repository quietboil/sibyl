/*
    CREATE TABLE lob_data (
        id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(50),
        text CLOB DEFAULT EMPTY_CLOB()
    );
 */
fn main() -> Result<(),Box<dyn std::error::Error>> {
    use sibyl::CLOB;
    use std::fs;

    let id: i32 = std::env::args().skip(1).next().expect("Record ID").parse().expect("integer ID");

    let text = fs::read_to_string("lorem_ipsum.txt")?;

    let dbname = std::env::var("DBNAME").expect("database name");
    let dbuser = std::env::var("DBUSER").expect("user name");
    let dbpass = std::env::var("DBPASS").expect("password");

    let oracle = sibyl::env()?;
    let session = oracle.connect(&dbname, &dbuser, &dbpass)?;

    let stmt = session.prepare("
        SELECT text
          FROM lob_data
         WHERE id = :ID
           FOR UPDATE
    ")?;
    if let Some(row) = stmt.query_single(&id)? {
        let clob: CLOB = row.get(0)?;

        clob.append(&text)?;

        let new_len = clob.len()?;
        println!("New CLOB length={new_len}");
    } else {
        println!("Did not find CLOB with ID = {id}");
    }

    session.commit()?;

    Ok(())
}
