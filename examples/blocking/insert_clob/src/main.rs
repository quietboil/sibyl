/*
    CREATE TABLE lob_data (
        id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(50),
        text CLOB DEFAULT EMPTY_CLOB()
    );
*/
fn main() -> Result<(), Box<dyn std::error::Error>> {
    use sibyl::CLOB;
    use std::fs;

    let text = fs::read_to_string("lorem_ipsum.txt")?;

    let dbname = std::env::var("DBNAME").expect("database name");
    let dbuser = std::env::var("DBUSER").expect("user name");
    let dbpass = std::env::var("DBPASS").expect("password");

    let oracle = sibyl::env()?;
    let session = oracle.connect(&dbname, &dbuser, &dbpass)?;

    let stmt = session.prepare("
        INSERT INTO lob_data (name)
             VALUES (:NAME)
          RETURNING id, text
               INTO :NEW_ID, :NEW_TEXT
    ")?;
    let mut id = 0;
    let mut clob = CLOB::new(&session)?;
    let num_rows = stmt.execute((
        (":NAME", "inserted CLOB"),
        (":NEW_ID", &mut id),
        (":NEW_TEXT", &mut clob)
    ))?;
    let num_chars = clob.write(0, &text)?;

    session.commit()?;

    println!("Inserted {num_rows} row(s)");
    println!("CLOB id={id} [{num_chars} / {} ]", text.len());
    Ok(())
}
